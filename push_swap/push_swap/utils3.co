/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_calloc.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: vspinell <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/01/15 15:22:10 by vspinell          #+#    #+#             */
/*   Updated: 2021/01/16 18:31:58 by vspinell         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

void	*ft_put_ones(size_t count)
{
	int *array;
	int i;

	i = 0;
	array = malloc(count * sizeof (int));
	if(!array)
		return (0);
	while (i < count)
		array[i++] = 1;
	return (array);
}

int ft_diocaro(t_stacks stack)
{
	t_node      *fill;
    t_node      *prev;

    fill = stack.head_a->next;
   // fill = fill->next;
    while (fill)
    {
        prev = fill->prev;
        while(prev)
        {
            if (prev->num < fill->num && prev)
                prev->flags++;
            prev = prev->prev;
        }
        fill = fill->next;
    }
    prev = stack.head_a;

    //stampo

    t_node *stamp = prev;
    while (stamp)
    {
        printf("number [%d] has %d flags\n", stamp->num, stamp->flags);
        stamp = stamp->next;
    }
    return (prev);
}

int ft_max_flag(t_node *stack)
{
    t_node  *scroll;
    int     max_flag;

    scroll = stack;
    while(scroll->next)
    {
        if(scroll->next->flags > max_flag)
            max_flag = scroll->next->flags;
        scroll = scroll->next;
    }
    return (max_flag);
}

int ft_check_maxflag(t_node *stack, int max_flag)
{
    while (stack)
    {
        if (stack->flags == max_flag)
            return (1);
        stack = stack->next;
    }
    return (0);
}

t_stacks  ft_sort_stacks(t_stacks gen)
{
    int max_flag;
    t_node *stack_b;
    t_node *stack_a;

    stack_a = gen.head_a;
    max_flag = ft_max_flag(gen.head_a);
    stack_b = 0;
    //printf("max flag is: %d\n", max_flag)
    while(max_flag)
    {
        if (ft_check_maxflag(stack_a, max_flag))
        {
            if (stack_a->flags < max_flag)
            {
                ft_push(&stack_b, &stack_a);
                //printf("head stack A: [%d] head stack B: [%d]\n", stack_a->num, stack_b->num);
            }
            else if (stack_a->flags == max_flag)
            {
                ft_rotate(&stack_a);
                //printf("\nROOOTAAATE A: [%d]\n\n", stack_a->num);
                max_flag--;
            }
        }
        else
            max_flag--;
    }
    while (stack_a->flags != 0)
        ft_push(&stack_b, &stack_a);
    ft_rotate(&stack_a);
    if (stack_a > stack_a->next)
        ft_push(&stack_b, &stack_a);
    gen.head_a = stack_a;
    gen.head_b = stack_b;

    //printf("%d----%d\n", gen.head_a->num, gen.head_b->num);

    //print
    return (gen);
}